// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`$ > should compile to $$effect 1`] = `
"import { $$effect as _$$effect } from \\"silmaril\\";
import { $$context as _$$context } from \\"silmaril\\";
import { $$, $ } from 'silmaril';
$$(() => {
  let _ctx = _$$context();
  _$$effect(_ctx, () => [], () => console.log('Example'));
  _$$effect(_ctx, () => [], () => console.log('Example'));
});"
`;

exports[`$ > should not subscribe to unowned variables 1`] = `
"import { $$effect as _$$effect } from \\"silmaril\\";
import { $$context as _$$context } from \\"silmaril\\";
import { $$, $ } from 'silmaril';
let x = 0;
$$(() => {
  let _ctx = _$$context();
  _$$effect(_ctx, () => [], () => console.log(x));
  _$$effect(_ctx, () => [], () => console.log(x));
});"
`;

exports[`$ > should subscribe to owned variables 1`] = `
"import { $$effect as _$$effect } from \\"silmaril\\";
import { $$context as _$$context } from \\"silmaril\\";
import { $$, $ } from 'silmaril';
$$(() => {
  let _ctx = _$$context();
  let x = 0;
  _$$effect(_ctx, () => [x], () => console.log(x));
  _$$effect(_ctx, () => [x], () => console.log(x));
});"
`;

exports[`$store > should allow tracking for stores 1`] = `
"import { $$update as _$$update } from \\"silmaril\\";
import { $$subscribe as _$$subscribe } from \\"silmaril\\";
import { $$context as _$$context } from \\"silmaril\\";
import { $$, $store } from 'silmaril';
$$(() => {
  let _ctx = _$$context();
  let _store = someStore,
    example = _store.get(),
    /*$skip*/_subscribe = _$$subscribe(_ctx, _store, () => _$$update(_ctx, example = _store.get()), () => [example], () => _store.set(example));
  $(console.log(example));
});"
`;

exports[`$store > should allow updates for mutable stores 1`] = `
"import { $$update as _$$update } from \\"silmaril\\";
import { $$subscribe as _$$subscribe } from \\"silmaril\\";
import { $$context as _$$context } from \\"silmaril\\";
import { $$, $store } from 'silmaril';
$$(() => {
  let _ctx = _$$context();
  let _store = someStore,
    example = _store.get(),
    /*$skip*/_subscribe = _$$subscribe(_ctx, _store, () => _$$update(_ctx, example = _store.get()), () => [example], () => _store.set(example));
  function mutate() {
    _$$update(_ctx, example = newValue);
  }
});"
`;

exports[`$store > should compile $store with const 1`] = `
"import { $$update as _$$update } from \\"silmaril\\";
import { $$subscribe as _$$subscribe } from \\"silmaril\\";
import { $$context as _$$context } from \\"silmaril\\";
import { $$, $store } from 'silmaril';
$$(() => {
  let _ctx = _$$context();
  let _store = someStore,
    example = _store.get(),
    /*$skip*/_subscribe = _$$subscribe(_ctx, _store, () => _$$update(_ctx, example = _store.get()));
});"
`;

exports[`$store > should compile $store with let 1`] = `
"import { $$update as _$$update } from \\"silmaril\\";
import { $$subscribe as _$$subscribe } from \\"silmaril\\";
import { $$context as _$$context } from \\"silmaril\\";
import { $$, $store } from 'silmaril';
$$(() => {
  let _ctx = _$$context();
  let _store = someStore,
    example = _store.get(),
    /*$skip*/_subscribe = _$$subscribe(_ctx, _store, () => _$$update(_ctx, example = _store.get()), () => [example], () => _store.set(example));
});"
`;

exports[`$sync > should compile to $$sync 1`] = `
"import { $$sync as _$$sync } from \\"silmaril\\";
import { $$context as _$$context } from \\"silmaril\\";
import { $$, $sync } from 'silmaril';
$$(() => {
  let _ctx = _$$context();
  _$$sync(_ctx, () => [], () => console.log('Example'));
  _$$sync(_ctx, () => [], () => console.log('Example'));
});"
`;

exports[`$sync > should not subscribe to unowned variables 1`] = `
"import { $$sync as _$$sync } from \\"silmaril\\";
import { $$context as _$$context } from \\"silmaril\\";
import { $$, $sync } from 'silmaril';
let x = 0;
$$(() => {
  let _ctx = _$$context();
  _$$sync(_ctx, () => [], () => console.log(x));
  _$$sync(_ctx, () => [], () => console.log(x));
});"
`;

exports[`$sync > should subscribe to owned variables 1`] = `
"import { $$sync as _$$sync } from \\"silmaril\\";
import { $$context as _$$context } from \\"silmaril\\";
import { $$, $sync } from 'silmaril';
$$(() => {
  let _ctx = _$$context();
  let x = 0;
  _$$sync(_ctx, () => [x], () => console.log(x));
  _$$sync(_ctx, () => [x], () => console.log(x));
});"
`;

exports[`let > should compile on AssignmentExpression 1`] = `
"import { $$update as _$$update } from \\"silmaril\\";
import { $$context as _$$context } from \\"silmaril\\";
import { $$ } from 'silmaril';
$$(() => {
  let _ctx = _$$context();
  let x = 0;
  function increment() {
    _$$update(_ctx, x += 1);
  }
});"
`;

exports[`let > should compile on UpdateExpression 1`] = `
"import { $$update as _$$update } from \\"silmaril\\";
import { $$context as _$$context } from \\"silmaril\\";
import { $$ } from 'silmaril';
$$(() => {
  let _ctx = _$$context();
  let x = 0;
  function increment() {
    _$$update(_ctx, x++);
  }
});"
`;

exports[`let > should compile when accessing owned variables 1`] = `
"import { $$update as _$$update } from \\"silmaril\\";
import { $$sync as _$$sync } from \\"silmaril\\";
import { $$context as _$$context } from \\"silmaril\\";
import { $$ } from 'silmaril';
$$(() => {
  let _ctx = _$$context();
  let greeting = 'Hello';
  let receiver = 'World';
  let message,
    /*$skip*/_computed = _$$sync(_ctx, () => [greeting, receiver], () => _$$update(_ctx, message = greeting + ' ' + receiver));
});"
`;

exports[`let > should not compile when not accessing owned variables 1`] = `
"import { $$context as _$$context } from \\"silmaril\\";
import { $$ } from 'silmaril';
$$(() => {
  let _ctx = _$$context();
  let message = Math.random();
});"
`;

exports[`onDestroy > should compile to $$destroy 1`] = `
"import { $$destroy as _$$destroy } from \\"silmaril\\";
import { $$context as _$$context } from \\"silmaril\\";
import { $$, onDestroy } from 'silmaril';
$$(() => {
  let _ctx = _$$context();
  _$$destroy(_ctx, () => console.log('Example'));
});"
`;

exports[`onMount > should compile to $$mount 1`] = `
"import { $$mount as _$$mount } from \\"silmaril\\";
import { $$context as _$$context } from \\"silmaril\\";
import { $$, onMount } from 'silmaril';
$$(() => {
  let _ctx = _$$context();
  _$$mount(_ctx, () => sconsole.log('Example'));
});"
`;
